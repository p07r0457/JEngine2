<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE server>

<server>

 	<!--
		jEngine Queue Definitions
		drop into server/default/deploy/jms
	-->
  
  <mbean code="org.jboss.mq.server.jmx.Queue"
	 name="JEngine:service=Queue,name=Q_IN_HL7_MS4_MT_ADT">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.jmx.Queue"
	 name="JEngine:service=Queue,name=Q_OUT_HL7_MS4_MT_ADT">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.jmx.Queue"
	 name="JEngine:service=Queue,name=Q_IN_HL7_MT_MS4_CHG">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.jmx.Queue"
	 name="JEngine:service=Queue,name=Q_OUT_HL7_MT_MS4_CHG">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.jmx.Queue" name="JEngine:service=Queue,name=Q_ERROR_OUT_HL7_MS4">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>
  <mbean code="org.jboss.mq.server.jmx.Queue" name="JEngine:service=Queue,name=Q_ERROR_OUT_HL7_MT">
       <depends optional-attribute-name="DestinationManager">jboss.mq:service=DestinationManager</depends>
  </mbean>

   <mbean code="org.jengine.mbean.HL7ServerService" name="JEngine:service=Interface,name=TCP_IN_HL7_MS4">
<!--	<attribute name="Comment">Inbound ADT HL7 from MS4 (Cascade)</attribute> -->
	<attribute name="Port">9000</attribute>
       	<attribute name="IFName">TCP_IN_HL7_MS4</attribute>
       	<attribute name="Queues">Q_IN_HL7_MS4_MT_ADT</attribute>
   </mbean>

   <mbean code="org.jengine.mbean.HL7ServerService" name="JEngine:service=Interface,name=TCP_IN_HL7_MT">
<!--	<attribute name="Comment">Inbound Charges HL7 from MediTech</attribute> -->
	<attribute name="Port">9001</attribute>
       	<attribute name="IFName">TCP_IN_HL7_MT</attribute>
       	<attribute name="Queues">Q_IN_HL7_MT_MS4_CHG</attribute>
   </mbean>

   <mbean code="org.jengine.mbean.HL7ClientService" name="JEngine:service=Interface,name=TCP_OUT_HL7_MS4">
<!--        <attribute name="Comment">Outbound Charges HL7 to MS4 (Cascade)</attribute> -->
        <attribute name="Port">3000</attribute>
        <attribute name="IFName">TCP_OUT_HL7_MS4</attribute>
        <attribute name="IPAddress">127.0.0.1</attribute>
        <!-- if xlate is enabled
        <attribute name="Queue">Q_OUT_HL7_MT_MS4_CHG</attribute>
        -->
        <attribute name="Queue">Q_OUT_HL7_MT_MS4_CHG</attribute>
        <attribute name="QueueError">Q_ERROR_OUT_HL7_MS4</attribute>
        <attribute name="ResendFailedCount">10</attribute>
        <attribute name="ResendRetryInterval">5000</attribute>
        <attribute name="ConnectRetryInterval">20000</attribute>
   </mbean>

   <mbean code="org.jengine.mbean.HL7ClientService" name="JEngine:service=Interface,name=TCP_OUT_HL7_MT">
<!--        <attribute name="Comment">Outbound ADT HL7 to MediTech</attribute> -->
        <attribute name="Port">6000</attribute>
        <attribute name="IFName">TCP_OUT_HL7_MT</attribute>
        <attribute name="IPAddress">127.0.0.1</attribute>
        <attribute name="Queue">Q_OUT_HL7_MS4_MT_ADT</attribute>
        <attribute name="QueueError">Q_ERROR_OUT_HL7_MT</attribute>
        <attribute name="ResendFailedCount">10</attribute>
        <attribute name="ResendRetryInterval">5000</attribute>
        <attribute name="ConnectRetryInterval">20000</attribute>
   </mbean>

   <mbean code="org.jengine.mbean.HL7XformService" name="JEngine:service=Interface,name=XFORM_ADT_MS4_MT">
        <attribute name="IFName">XFORM_ADT_MS4_MT</attribute>
       	<attribute name="InQueue">Q_IN_HL7_MS4_MT_ADT</attribute>
       	<attribute name="OutQueue">Q_OUT_HL7_MS4_MT_ADT</attribute>
        <attribute name="Transformation">org.jengine.xforms.bsh.Transformation</attribute>
        <attribute name="TransformationProperties">
           import org.jengine.tools.hl7.Segment;
           import org.jengine.tools.hl7.Field;
           
	   log.info("transformation in progress");
	   log.info("version is "+message.versionID);
           Segment pv1Segment;
           Segment evnSegment;
           Segment pidSegment;
           Segment gt1Segment;
           String eventTypeCode, patientClass;
           try {
               pidSegment = message.getSegment("PID");
               pv1Segment = message.getSegment("PV1");
               evnSegment = message.getSegment("EVN");
               gt1Segment = message.getSegment("GT1");
           } catch (Exception e)
           { log.error("**** PID, PV1, EVN, GT1 missing ****"); }

           eventTypeCodeField = evnSegment.getField(1);
           eventTypeCode = eventTypeCodeField.get(1);
           patientClassField = pv1Segment.getField(2);
           patientClass = patientClassField.get(1);

           String mappedPatientStatus = "";
           try {
		if (eventTypeCode.equalsIgnoreCase("A01")) mappedPatientStatus = "ADM";
                else if (eventTypeCode.equalsIgnoreCase("A02")) mappedPatientStatus =  "LTP";
                else if (eventTypeCode.equalsIgnoreCase("A03")) mappedPatientStatus = "DIS";
                else if (eventTypeCode.equalsIgnoreCase("A04")) mappedPatientStatus = "REG";
                else if (eventTypeCode.equalsIgnoreCase("A05")) mappedPatientStatus = "SCH";
                else if (eventTypeCode.equalsIgnoreCase("A06")) mappedPatientStatus = "ADM";
                else if (eventTypeCode.equalsIgnoreCase("A07")) mappedPatientStatus = "";
                else if (eventTypeCode.equalsIgnoreCase("A08")) mappedPatientStatus = "LTP";
                else if (eventTypeCode.equalsIgnoreCase("A09")) mappedPatientStatus = "";
                else if (eventTypeCode.equalsIgnoreCase("A11")) mappedPatientStatus = "LTP";
                else if (eventTypeCode.equalsIgnoreCase("A12")) mappedPatientStatus = "";
                else if (eventTypeCode.equalsIgnoreCase("A13")) mappedPatientStatus = "LTP";
                else if (eventTypeCode.equalsIgnoreCase("A17")) mappedPatientStatus = "LTP";
                else if (eventTypeCode.equalsIgnoreCase("A18")) mappedPatientStatus = "LTP";
		else mappedPatientStatus = "";
            Field f = new Field(mappedPatientStatus);
            pv1Segment.setField(41,f);
            log.info("EventTypeCode : [" + eventTypeCode + "]" + " >> PatientStatus : [" + mappedPatientStatus + "]");
           } catch (Exception e)
           { log.error("Exception in mapping Patient Status"); e.printStackTrace(); }

           String mappedPatientType = "";
           try {
		if (patientClass.equalsIgnoreCase("B")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("O")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("P")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("T")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("B")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("W")) mappedPatientType = "CLI";
                else if (patientClass.equalsIgnoreCase("E")) mappedPatientType = "ER";
                else if (patientClass.equalsIgnoreCase("I")) mappedPatientType = "IN";
                else if (patientClass.equalsIgnoreCase("N")) mappedPatientType = "IN";
                else if (patientClass.equalsIgnoreCase("D")) mappedPatientType = "INO";
                else if (patientClass.equalsIgnoreCase("R")) mappedPatientType = "RCR";
                else if (patientClass.equalsIgnoreCase("A")) mappedPatientType = "REF";
                else if (patientClass.equalsIgnoreCase("X")) mappedPatientType = "REF";
                else if (patientClass.equalsIgnoreCase("S")) mappedPatientType = "SDC";
		else mappedPatientType = "";
            Field f=new Field(mappedPatientType);
            pv1Segment.setField(18,f);
            log.info("PatientClass : [" + patientClass + "]" + " >> PatientType : [" + mappedPatientType + "]");
           } catch (Exception e)
           { log.error("Exception in mapping Patient Type"); e.printStackTrace(); }

           Field location = pv1Segment.getField(3);
           location.set(1,4,"ACH");
           Field lf = new Field("ACH");
           pv1Segment.setField(39,lf);
           
           Field identifier = pidSegment.getField(3);
           String medRecNumber = identifier.get(1,1);
           
           String[] pcsMR = medRecNumber.split("-");
           String newMedRecNumber = "";
           for (int i=0; i != pcsMR.length; i++)  //a less-than sign does not work here (xml)!
               newMedRecNumber += pcsMR[i];
 
           Field newIdentifier = new Field(newMedRecNumber);
           pidSegment.setField(3,newIdentifier);

           //*************************
           //RELATIONSHIP MAPPING : Guarantor GT1-11
           //*************************
           if (gt1Segment != null)
           {
               Field relationshipField = gt1Segment.getField(11);
               String relationship = relationshipField.get(1);
               String mappedRelationship = "";
               try {
                    if (relationship.equalsIgnoreCase("O")) mappedRelationship = "AU";
                    else if (relationship.equalsIgnoreCase("G")) mappedRelationship = "BR";
                    else if (relationship.equalsIgnoreCase("J")) mappedRelationship = "DA";
                    else if (relationship.equalsIgnoreCase("Y")) mappedRelationship = "EM";
                    else if (relationship.equalsIgnoreCase("E")) mappedRelationship = "FA";
                    else if (relationship.equalsIgnoreCase("Z")) mappedRelationship = "FO";
                    else if (relationship.equalsIgnoreCase("Y")) mappedRelationship = "FR";
                    else if (relationship.equalsIgnoreCase("2")) mappedRelationship = "GD";
                    else if (relationship.equalsIgnoreCase("L")) mappedRelationship = "GF";
                    else if (relationship.equalsIgnoreCase("K")) mappedRelationship = "GM";
                    else if (relationship.equalsIgnoreCase("1")) mappedRelationship = "GS";
                    else if (relationship.equalsIgnoreCase("C")) mappedRelationship = "HU";
                    else if (relationship.equalsIgnoreCase("X")) mappedRelationship = "LP";
                    else if (relationship.equalsIgnoreCase("B")) mappedRelationship = "MD";
                    else if (relationship.equalsIgnoreCase("F")) mappedRelationship = "MO";
                    else if (relationship.equalsIgnoreCase("N")) mappedRelationship = "SF";
                    else if (relationship.equalsIgnoreCase("H")) mappedRelationship = "SI";
                    else if (relationship.equalsIgnoreCase("M")) mappedRelationship = "SM";
                    else if (relationship.equalsIgnoreCase("I")) mappedRelationship = "SO";
                    else if (relationship.equalsIgnoreCase("A")) mappedRelationship = "SP";
                    else if (relationship.equalsIgnoreCase("P")) mappedRelationship = "UN";
                    else if (relationship.equalsIgnoreCase("D")) mappedRelationship = "WI";
                    else mappedRelationship = "";
                Field f=new Field(mappedRelationship);
                gt1Segment.setField(11,f);
                log.info("GUARANTOR relationship : [" + relationship + "]" + " >> mappedRelationship : [" + mappedRelationship + "]");
               } catch (Exception e)
               { log.error("Exception in mapping Guarantor Relationship GT1-11"); e.printStackTrace(); }
           }

           //*************************
           //RACE MAPPING : Patient Race PID-10
           //*************************
           Field raceField = pidSegment.getField(10);
           String race = raceField.get(1);
           String mappedRace = "";
           try {
		if (race.equalsIgnoreCase("A")) mappedRace = "AS";
                else if (race.equalsIgnoreCase("B")) mappedRace = "AA";
                else if (race.equalsIgnoreCase("C")) mappedRace = "CA";
                else if (race.equalsIgnoreCase("H")) mappedRace = "HI";
                else if (race.equalsIgnoreCase("I")) mappedRace = "NA";
                else if (race.equalsIgnoreCase("M")) mappedRace = "HI";
                else if (race.equalsIgnoreCase("O")) mappedRace = "OT";
                else if (race.equalsIgnoreCase("U")) mappedRace = "OT";
                else if (race.equalsIgnoreCase("W")) mappedRace = "CA";
		else mappedRace = "";
            Field f=new Field(mappedRace);
            pidSegment.setField(10,f);
            log.info("PATIENT race : [" + race + "]" + " >> mappedRace : [" + mappedRace + "]");
           } catch (Exception e)
           { log.error("Exception in mapping Patient Race PID-10"); e.printStackTrace(); }
          
           //*************************
           //ADMIT SOURCE MAPPING : PV1-14
           //*************************
           Field admitSourceField = pv1Segment.getField(14);
           String admitSource = admitSourceField.get(1);
           String mappedAdmitSource = "";
           try {
		if (admitSource.equalsIgnoreCase("2")) mappedAdmitSource = "CLI";
                else if (admitSource.equalsIgnoreCase("7")) mappedAdmitSource = "EMR";
                else if (admitSource.equalsIgnoreCase("3")) mappedAdmitSource = "HMO";
                else if (admitSource.equalsIgnoreCase("8")) mappedAdmitSource = "LAW";
                else if (admitSource.equalsIgnoreCase("1")) mappedAdmitSource = "PHY";
                else if (admitSource.equalsIgnoreCase("4")) mappedAdmitSource = "TAC";
                else if (admitSource.equalsIgnoreCase("6")) mappedAdmitSource = "TOT";
                else if (admitSource.equalsIgnoreCase("5")) mappedAdmitSource = "TSN";
                else if (admitSource.equalsIgnoreCase("9")) mappedAdmitSource = "UNK";
		else mappedAdmitSource = "";
            Field f=new Field(mappedAdmitSource);
            pv1Segment.setField(14,f);
            log.info("admitSource : [" + admitSource + "]" + " >> mappedAdmitSource : [" + mappedAdmitSource + "]");
           } catch (Exception e)
           { log.error("Exception in mapping admitSource PV1-14"); e.printStackTrace(); }

           //*************************
           //ADMIT PRIORITY MAPPING : PV1-4
           //*************************
           Field admitPriorityField = pv1Segment.getField(4);
           String admitPriority = admitPriorityField.get(1);
           String mappedAdmitPriority = "";
           try {
		if (admitPriority.equalsIgnoreCase("3")) mappedAdmitPriority = "EL";
                else if (admitPriority.equalsIgnoreCase("1")) mappedAdmitPriority = "ER";
                else if (admitPriority.equalsIgnoreCase("9")) mappedAdmitPriority = "NA";
                else if (admitPriority.equalsIgnoreCase("4")) mappedAdmitPriority = "NB";
                else if (admitPriority.equalsIgnoreCase("2")) mappedAdmitPriority = "UR";
		else mappedAdmitPriority = "";
            Field f=new Field(mappedAdmitPriority);
            pv1Segment.setField(4,f);
            log.info("admitPriority : [" + admitPriority + "]" + " >> mappedAdmitPriority : [" + mappedAdmitPriority + "]");
           } catch (Exception e)
           { log.error("Exception in mapping admitPriority PV1-4"); e.printStackTrace(); }

           //*************************
           //FINANCIAL CLASS MAPPING : PV1-20
           //*************************
           Field financialClassField = pv1Segment.getField(20);
           String financialClass = financialClassField.get(1);
           financialClass = financialClass.substring(0,2);
           String mappedFinancialClassField = "";
           try {
		if (financialClass.equalsIgnoreCase("00")) mappedFinancialClass = "SP";
                else if (financialClass.equalsIgnoreCase("10")) mappedFinancialClass = "CO";
                else if (financialClass.equalsIgnoreCase("11")) mappedFinancialClass = "CO";
                else if (financialClass.equalsIgnoreCase("12")) mappedFinancialClass = "U";
                else if (financialClass.equalsIgnoreCase("15")) mappedFinancialClass = "CO";
                else if (financialClass.equalsIgnoreCase("20")) mappedFinancialClass = "BC";
                else if (financialClass.equalsIgnoreCase("30")) mappedFinancialClass = "MCRA";
                else if (financialClass.equalsIgnoreCase("40")) mappedFinancialClass = "CH";
                else if (financialClass.equalsIgnoreCase("45")) mappedFinancialClass = "MCAL";
                else if (financialClass.equalsIgnoreCase("50")) mappedFinancialClass = "MCD";
                else if (financialClass.equalsIgnoreCase("61")) mappedFinancialClass = "MVA";
                else if (financialClass.equalsIgnoreCase("71")) mappedFinancialClass = "IND";
                else if (financialClass.equalsIgnoreCase("80")) mappedFinancialClass = "SP";
                else if (financialClass.equalsIgnoreCase("90")) mappedFinancialClass = "OT";
		else mappedFinancialClass = "";
            Field f=new Field(mappedFinancialClass);
            pv1Segment.setField(20,f);
            log.info("financialClass : [" + financialClass + "]" + " >> mappedFinancialClass : [" + mappedFinancialClass + "]");
           } catch (Exception e)
           { log.error("Exception in mapping financialClass PV1-20"); e.printStackTrace(); }

           
           //*************************
           //LOCATION MAPPING : PV1-10 -->> PV1-3
           //*************************
           Field serviceCodeField = pv1Segment.getField(10);
           String serviceCode = serviceCodeField.get(1);
           Field patientTypeField = pv1Segment.getField(18);
           String patientType = patientTypeField.get(1);
           Field locationField = pv1Segment.getField(3);
           String mappedLocation = "";
           try {
                //if LOCATION is empty, then grab the service code and stick it in
                if (locationField != null) 
                {
                    if (locationField.toString().equals("") == true)
                    {
                        if (serviceCode.equalsIgnoreCase("EMR")) mappedLocation = "ER";
                        else if (serviceCode.equalsIgnoreCase("CTS")) mappedLocation = "CT";
                        else if (serviceCode.equalsIgnoreCase("RAD")) mappedLocation = "RAD";
                        else if (serviceCode.equalsIgnoreCase("LAB")) mappedLocation = "LAB";
                        else if (serviceCode.equalsIgnoreCase("PHT")) mappedLocation = "PT";
                        else if (serviceCode.equalsIgnoreCase("DEP")) mappedLocation = "DEP";
                        else if (serviceCode.equalsIgnoreCase("DIT")) mappedLocation = "DIT";
                        else if (serviceCode.equalsIgnoreCase("PHT")) mappedLocation = "PT";
                        else if (serviceCode.equalsIgnoreCase("SPS")) mappedLocation = "SPS";
                        else if (serviceCode.equalsIgnoreCase("SPT")) mappedLocation = "SPT";
                        else if (serviceCode.equalsIgnoreCase("OBN")) mappedLocation = "OBS";
                        else if (serviceCode.equalsIgnoreCase("OHD")) mappedLocation = "OHD";
                        else if (serviceCode.equalsIgnoreCase("OCT")) mappedLocation = "OT";
                        else if (serviceCode.equalsIgnoreCase("ORT")) mappedLocation = "ORTHO";
                        else if (serviceCode.equalsIgnoreCase("PUL")) mappedLocation = "RT";
                        else mappedLocation = "";
                        log.info("serviceCode : [" + serviceCode + "]" + " >> mappedLocation : [" + mappedLocation + "]");

                        if (patientType.equalsIgnoreCase("H"))
                        {
                            mappedLocation = "HH";
                            log.info("patientType : [" + patientType + "]" + " >> mappedLocation : [" + mappedLocation + "]");
                        }

                        Field f=new Field(mappedLocation);
                        pv1Segment.setField(3,f);
                    }
                }
           } catch (Exception e)
           { log.error("Exception in mapping location PV1-3"); e.printStackTrace(); }
                      
           </attribute>
   </mbean>
   <mbean code="org.jengine.mbean.HL7XformService" name="JEngine:service=Interface,name=XFORM_CHG_MT_MS4">
        <attribute name="IFName">XFORM_CHG_MT_MS4</attribute>
       	<attribute name="InQueue">Q_IN_HL7_MT_MS4_CHG</attribute>
       	<attribute name="OutQueue">Q_OUT_HL7_MT_MS4_CHG</attribute>
        <attribute name="Transformation">org.jengine.xforms.bsh.Transformation</attribute>
        <attribute name="TransformationProperties">
           import org.jengine.tools.hl7.Segment;
           import org.jengine.tools.hl7.Field;
	   log.info("transformation in progress");
	   log.info("version is "+message.versionID);
           Segment fhsSegment = message.getSegment("FHS");
           log.info("message.getSegment(FHS)");
           Segment ftsSegment = message.getSegment("FTS");
           log.info("message.getSegment(FTS)");
           message.removeSegment(ftsSegment);
           log.info("---FTS Segment Removed");
           message.removeSegment(fhsSegment);
           log.info("---FHS Segment Removed");
           
           //SET BHS SEGMENT FIELDS
           Segment bhsSegment = message.getSegment("BHS");
           Segment btsSegment = message.getSegment("BTS");
           Field fac = new Field("500");  //facilities
           Field app = new Field("MS4AR");//sending application
           bhsSegment.setField(3,fac);
           bhsSegment.setField(4,app);
           bhsSegment.setField(5,fac);
           Field batchType = new Field("C");
           bhsSegment.setField(8,batchType);
           Field batchControlId = new Field("");
           bhsSegment.setField(11,batchControlId);
           
           Field empty = new Field("");
           btsSegment.setField(2,empty);
           btsSegment.setField(3,empty);
           btsSegment.setField(3,empty);

           java.util.Vector mshSegs = new Vector();
           mshSegs = message.getSegments("MSH");
           log.info("Got mshSegs : insert facilities, sending application");
           for(java.util.Iterator it=mshSegs.iterator(); it.hasNext(); )
           {
               Segment seg=(Segment)it.next();
               Field fac = new Field("500");  //facilities
               Field app = new Field("MS4AR");//sending application
               seg.setField(4,fac);
               seg.setField(5,app);
               seg.setField(6,fac);
           }

           java.util.Vector ft1Segs = new Vector();
           ft1Segs = message.getSegments("FT1");
           log.info("Got " + ft1Segs.size() + " ft1Segs : insert corrected batch ID");
           for(java.util.Iterator it2=ft1Segs.iterator(); it2.hasNext(); )
           {
               Segment seg=(Segment)it2.next();
	       Field batchIdField = seg.getField(3);
	       String batchId = batchIdField.get(1,1);
	       String regexStr = "\\.";
	       String[] piecesBatchId = batchId.split(regexStr);
	       String newBatchId = "";
	       String newBatchNumber = "";
	       if (piecesBatchId[1].length() > 2)
	       		newBatchNumber = piecesBatchId[1].substring(2); //takes substring starting at position 2
		else if (piecesBatchId[1].length() == 0)
			newBatchNumber = "01";
		else
			newBatchNumber = piecesBatchId[1];
	       newBatchId = piecesBatchId[0] + newBatchNumber;
	       Field bIdField = new Field(newBatchId);
               seg.setField(3,bIdField);
           }

	</attribute>
   </mbean>
</server>
